<?php

/**
 * This is the model base class for the table "inc_document".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "IncDocument".
 *
 * Columns in table "inc_document" available as properties of the model,
 * followed by relations of table "inc_document" available as properties of the model.
 *
 * @property integer $document_id
 * @property string $inc_document_no
 * @property string $is_application
 * @property string $sender
 * @property string $sender_ref
 * @property integer $document_status_id
 * @property string $status_date
 * @property integer $from_organization_id
 * @property integer $to_organization_id
 * @property string $sender_contact
 * @property integer $fee_id
 *
 * @property Assign[] $assigns
 * @property Caisse $caisse
 * @property Fee $fee
 * @property Document $document
 * @property DocumentStatus $documentStatus
 * @property Organization $fromOrganization
 * @property Organization $toOrganization
 */
abstract class BaseIncDocument extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'inc_document';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'IncDocument|IncDocuments', $n);
	}

	public static function representingColumn() {
		return 'inc_document_no';
	}

	public function rules() {
		return array(
			array('document_id, inc_document_no, document_status_id, status_date, from_organization_id, to_organization_id', 'required'),
			array('document_id, document_status_id, from_organization_id, to_organization_id, fee_id', 'numerical', 'integerOnly'=>true),
			array('inc_document_no', 'length', 'max'=>17),
			array('is_application', 'length', 'max'=>3),
			array('sender, sender_contact, office_no', 'length', 'max'=>255),
			array('sender_ref', 'length', 'max'=>60),
			array('is_application, sender, sender_ref, sender_contact, fee_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('document_id, office_no, inc_document_no, is_application, sender, sender_ref, document_status_id, status_date, from_organization_id, to_organization_id, sender_contact, fee_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'assigns' => array(self::HAS_MANY, 'Assign', 'inc_document_document_id'),
			'caisse' => array(self::HAS_ONE, 'Caisse', 'inc_document_id'),
			'fee' => array(self::BELONGS_TO, 'Fee', 'fee_id'),
			'document' => array(self::BELONGS_TO, 'Document', 'document_id'),
			'documentStatus' => array(self::BELONGS_TO, 'DocumentStatus', 'document_status_id'),
			'fromOrganization' => array(self::BELONGS_TO, 'Organization', 'from_organization_id'),
			'toOrganization' => array(self::BELONGS_TO, 'Organization', 'to_organization_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'document_id' => null,
			'inc_document_no' => Yii::t('app', 'Inc Document No'),
			'is_application' => Yii::t('app', 'Is Application'),
			'sender' => Yii::t('app', 'Sender'),
			'sender_ref' => Yii::t('app', 'Sender Ref'),
			'document_status_id' => null,
			'status_date' => Yii::t('app', 'Status Date'),
			'from_organization_id' => null,
			'to_organization_id' => null,
			'sender_contact' => Yii::t('app', 'Sender Contact'),
			'office_no' => Yii::t('app', 'Office No'),
			'fee_id' => null,
			'assigns' => null,
			'caisse' => null,
			'fee' => null,
			'document' => null,
			'documentStatus' => null,
			'fromOrganization' => null,
			'toOrganization' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('document_id', $this->document_id);
		$criteria->compare('inc_document_no', $this->inc_document_no, true);
		$criteria->compare('is_application', $this->is_application, true);
		$criteria->compare('sender', $this->sender, true);
		$criteria->compare('sender_ref', $this->sender_ref, true);
		$criteria->compare('document_status_id', $this->document_status_id);
		$criteria->compare('status_date', $this->status_date, true);
		$criteria->compare('from_organization_id', $this->from_organization_id);
		$criteria->compare('to_organization_id', $this->to_organization_id);
		$criteria->compare('sender_contact', $this->sender_contact, true);
		$criteria->compare('office_no', $this->office_no, true);
		$criteria->compare('fee_id', $this->fee_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}